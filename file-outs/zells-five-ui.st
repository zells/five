Morph subclass: #Z5ClockScopeMorph	instanceVariableNames: 'zell text'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5ClockScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 12:01'!acceptDroppingMorph: aMorph event: evt	zell addSignal: aMorph zell.! !!Z5ClockScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 20:04'!drawOn: canvas	| points |	super drawOn: canvas.	canvas frameOval: (self center - (7@7) extent: 14@14) color: (Color gray).		points := ({-3@ -3. 0@0. -3@3} collect: [:p|p+self center+(2@ -7)]).	canvas line: (points at: 1) to: (points at: 2) color: (Color gray).	canvas line: (points at: 2) to: (points at: 3) color: (Color gray).! !!Z5ClockScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 12:03'!forZell: aZell	zell := aZell.	zell onChanged: [:z|self refresh].	self refresh.! !!Z5ClockScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 20:37'!initialize	super initialize.	self color: Color black.	self extent: 300@100.	self layoutPolicy: TableLayout new.! !!Z5ClockScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 11:59'!refresh	self removeAllMorphs.	zell signals do: [:s | self addMorph: (Z5StemZellMorph for: s)]! !!Z5ClockScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 11:52'!wantsDroppedMorph: aMorph event: anEvent 	^ aMorph isKindOf: Z5StemZellMorph! !Morph subclass: #Z5DishMorph	instanceVariableNames: 'dish zellMorphs transmissionSpeed'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 20:04'!addMorph: morph	super addMorph: morph.	(morph isKindOf: Z5ZellMorph) ifTrue: [ self addZellMorph: morph ]! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/29/2017 11:56'!addZellMorph: morph	self calculateDelaysFrom: morph.	morph zell onEmit: [:signal | self showTransmission: morph].		(zellMorphs includes: morph) ifFalse: [		zellMorphs add: morph.		dish add: morph zell. ].	morph onDeleted: [ :m | 		dish remove: m zell.		zellMorphs remove: m ifAbsent: []].! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 18:11'!calculateDelaysFrom: zellMorph	zellMorphs do: [ :m |.		dish delayBetween: (m zell) and: (zellMorph zell) is: (m center dist: zellMorph center) / transmissionSpeed ]! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 19:13'!dish: aDish	dish := aDish.	dish onZellAdded: [ :z | 		| zellMorph  |		zellMorph := Z5ButtonZellMorph for: z.		((zellMorphs collect: [ :m | m zell ]) includes: z) 			ifFalse: [				zellMorphs add: zellMorph.				self addMorph: (zellMorph					position: self center;					yourself) ] ]! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/14/2017 16:37'!handlesMouseDown: event	^ true! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 20:27'!initialize	super initialize.		zellMorphs := Set new.	transmissionSpeed := 400.		self color: Color black.	self extent: 300@350.! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/14/2017 16:38'!mouseDown: event	self submorphs do: [ :m |		(m bounds containsPoint: event cursorPoint) ifTrue: [			m mouseDown: event ]]! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:46'!recalculateDelays	zellMorphs do: [:morph | self calculateDelaysFrom: morph]! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:42'!showTransmission: morph	self addMorph: ((Z5SignalAnimationMorph for: morph) speed: transmissionSpeed)! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:47'!transmissionSpeed: speed	transmissionSpeed := speed.	self recalculateDelays.! !!Z5DishMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/16/2017 10:34'!wantsDroppedMorph: aMorph event: anEvent 	^ aMorph isKindOf: Z5ZellMorph! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Z5DishMorph class	instanceVariableNames: ''!!Z5DishMorph class methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 15:11'!for: dish	^ Z5DishMorph new dish: dish! !TextMorph subclass: #Z5EmitterInputMorph	instanceVariableNames: 'zell'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5EmitterInputMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/15/2017 16:00'!forZell: aZell	zell := aZell.! !!Z5EmitterInputMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/15/2017 16:34'!initialize	super initialize.	self color: Color white.	self contents: 'signal'.! !!Z5EmitterInputMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/15/2017 20:36'!keyStroke: event	(event keyValue = 13)		ifTrue: [ 			zell emit: self contents. ]		ifFalse: [ super keyStroke: event. ]! !Morph subclass: #Z5EmitterScopeMorph	instanceVariableNames: 'zell'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5EmitterScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 10:14'!acceptDroppingMorph: aMorph event: evt	zell emit: aMorph zell.! !!Z5EmitterScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 20:04'!drawOn: canvas	| points |	super drawOn: canvas.	canvas fillOval: (self center + (-6@ -1) extent: 2@2) color: (Color gray).		points := ({-8@ -5. -3@0. -8@5} collect: [:p|p+self center+(10@0)]).	canvas line: (points at: 1) to: (points at: 2) color: (Color gray).	canvas line: (points at: 2) to: (points at: 3) color: (Color gray).		points := ({-11@ -3. -8@0. -11@3} collect: [:p|p+self center+(10@0)]).	canvas line: (points at: 1) to: (points at: 2) color: (Color gray).	canvas line: (points at: 2) to: (points at: 3) color: (Color gray).! !!Z5EmitterScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 10:09'!forZell: aZell	zell := aZell.	"self addMorph: (Z5EmitterInputMorph new 		forZell: aZell; 		yourself)."! !!Z5EmitterScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/15/2017 15:58'!initialize	super initialize.	self color: Color black.	self extent: 200@100.! !!Z5EmitterScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 10:10'!wantsDroppedMorph: aMorph event: anEvent 	^ aMorph isKindOf: Z5StemZellMorph! !Morph subclass: #Z5ListenerScopeMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5ListenerScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 18:11'!add: aStemZell	self addMorph: (Z5StemZellMorph for: aStemZell).! !!Z5ListenerScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/25/2017 14:05'!handlesMouseDown: event	^ true! !!Z5ListenerScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 20:31'!initialize	super initialize.	self color: Color black.	self extent: 400@350.	self layoutPolicy: TableLayout new.! !!Z5ListenerScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/25/2017 14:07'!mouseDown: event	self submorphs do: [ :m |		(m bounds containsPoint: event cursorPoint) ifTrue: [			m copy openInHand ]]! !Morph subclass: #Z5SignalAnimationMorph	instanceVariableNames: 'radius zellMorph speed start'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5SignalAnimationMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/21/2017 11:44'!drawOn: canvas	| clipped |	clipped := canvas copyClipRect: self bounds.	clipped frameOval: (self ovalRect) color: (self color mixed: 0.5 with: Color black).! !!Z5SignalAnimationMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 18:06'!initialize	super initialize.	radius := 0.	start := Time millisecondClockValue.! !!Z5SignalAnimationMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/13/2017 13:51'!ovalRect	^ (zellMorph center - radius) extent: (radius*2)@(radius*2).! !!Z5SignalAnimationMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 17:26'!speed: theSpeed	speed := theSpeed.! !!Z5SignalAnimationMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 18:24'!step	| inside |	inside := zellMorph owner bounds.	radius := (Time millisecondClockValue - start) / 1000 * speed.	self changed.		((radius/1.4 > (inside width)) and: (radius/1.4 > (inside height))) ifTrue: [ 			self delete. 		radius := 0 	].	self changed.! !!Z5SignalAnimationMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 11:59'!stepTime	 ^ 40.! !!Z5SignalAnimationMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:43'!zellMorph: aZellMorph	zellMorph := aZellMorph.	self color: aZellMorph color.	self bounds: aZellMorph owner bounds.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Z5SignalAnimationMorph class	instanceVariableNames: ''!!Z5SignalAnimationMorph class methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 17:25'!for: zellMorph	^ self new		zellMorph: zellMorph;		yourself! !TextMorph subclass: #Z5SignalEditorInputMorph	instanceVariableNames: 'listener'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5SignalEditorInputMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:39'!initialize	super initialize.	listener := [:text|].! !!Z5SignalEditorInputMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/29/2017 11:57'!keyStroke: event	super keyStroke: event.	listener value: self contents.! !!Z5SignalEditorInputMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 15:10'!listen: newListener	listener := newListener.! !Morph subclass: #Z5SignalEditorMorph	instanceVariableNames: 'signal children margin textSize textColor targetPosition speed parent isExpanded'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:17'!adopt: newChildren	children removeAll; addAll: newChildren.	self removeAllMorphs; addAllMorphs: children.! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 15:18'!compact	| child brother |	isExpanded := false.	children ifEmpty: [^ nil].		self extent: 0@0.	(1 to: children size) do: [:i|		child := children at: i.				(i = 1)			ifTrue: [				child moveTo: (self targetPosition) + margin.				self width: margin]			ifFalse: [				brother := children at: i-1.				child moveTo: (brother targetPosition) + ((brother width + margin)@0)].					child compact.		self width: self width + child width + margin.		self height: ((self height) max: (child height + (margin * 2))).	]! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 15:18'!expand	| child brother |	isExpanded := true.	children ifEmpty: [^ nil].		self extent: 0@0.	(1 to: children size) do: [:i|		child := children at: i.				(i = 1)			ifTrue: [				child moveTo: (self targetPosition) + margin.				self height: margin]			ifFalse: [				brother := children at: i-1.				child moveTo: (brother targetPosition) + (0@(brother height + margin))].					child expand.		self height: self height + child height + margin.		self width: ((self width) max: (child width + (margin * 2))).	]! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 11:50'!forSignal: aSignal atDepth: depth	signal := aSignal.		self color: (Color white mixed: 0.2 + (0.1 * depth) with: (Color black)).	(self color brightness > 0.6) ifTrue: [		textColor := (Color black) mixed: 0.8 with: Color white]! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 16:43'!initialize	super initialize.	children := OrderedCollection new.	textColor := Color white.	textSize := 18.	margin := 5.	speed := 400.! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 12:27'!mouseDown: event	self expand.! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 15:35'!moveTo: newTargetPosition 	targetPosition := nil.	self position: newTargetPosition.! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 13:47'!step	| increment delta speedPerStep |	super step.	targetPosition ifNil: [^ nil].		speedPerStep := speed / (1000 / self stepTime).	delta := self position dist: targetPosition.		(delta > speedPerStep) 		ifTrue: [			increment := (targetPosition - self position) / delta * speedPerStep.			self position: self position + increment]		ifFalse: [			self position: targetPosition.			targetPosition := nil].! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 14:10'!stepTime	 ^ 40.! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 14:15'!targetPosition	targetPosition ifNil: [^ self position].	^ targetPosition.! !!Z5SignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:37'!updateLayout	self owner updateLayout.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Z5SignalEditorMorph class	instanceVariableNames: ''!!Z5SignalEditorMorph class methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 11:51'!forSignal: signal atDepth: depth	(signal isKindOf: Number) ifTrue: [		^ Z5StringSignalEditorMorph new forSignal: (signal asString) atDepth: depth; yourself].	(signal isKindOf: String) ifTrue: [		^ Z5StringSignalEditorMorph new forSignal: signal atDepth: depth; yourself].	(signal isKindOf: Dictionary) ifTrue: [		^ Z5DictionarySignalEditorMorph new forSignal: signal atDepth: depth; yourself].	(signal isKindOf: Collection) ifTrue: [		^ Z5CollectionSignalEditorMorph new forSignal: signal atDepth: depth; yourself].	^ (Z5EmptySignalEditorMorph new)! !Z5SignalEditorMorph subclass: #Z5CollectionSignalEditorMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5CollectionSignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 13:06'!forSignal: signal atDepth: depth	super forSignal: signal atDepth: depth.	self adopt: (signal collect: [:item|		(Z5SignalEditorMorph forSignal: item atDepth: depth + 1)])! !Z5SignalEditorMorph subclass: #Z5DictionaryEntrySignalEditorMorph	instanceVariableNames: 'value string'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5DictionaryEntrySignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 14:24'!compact	value position: ((self position) + ((string width + (margin*2))@margin)).	value compact.			self width: (string width) + (value width) + (margin * 3).	self height: (value height) + (margin * 2).! !!Z5DictionaryEntrySignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 14:35'!expand	value position: ((self position) + ((string width + (margin*2))@margin)).	value expand.			self width: (string width) + (value width) + (margin * 3).	self height: (value height) + (margin * 2).! !!Z5DictionaryEntrySignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 15:24'!forSignal: signal at: key atDepth: depth	super forSignal: signal atDepth: depth.		string := Z5SignalEditorInputMorph new		listen: [self updateLayout];		contents: key;		fontName: #default size: textSize;		color: textColor;		position: (self position) + (margin@(margin));		yourself.		value := (Z5SignalEditorMorph forSignal: signal atDepth: depth + 1).		self removeAllMorphs.	self addMorph: string.	self addMorph: value.! !Z5SignalEditorMorph subclass: #Z5DictionarySignalEditorMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5DictionarySignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 14:18'!forSignal: signal atDepth: depth	super forSignal: signal atDepth: depth.	self adopt: (signal keys collect: [:key|		(Z5DictionaryEntrySignalEditorMorph new forSignal: (signal at:key) at:key atDepth: depth + 1)])"	| itemMorph lastItem |	super forSignal: signal atDepth: depth.	lastItem := nil.		self extent: 0@0.	signal keys do: [:key|			itemMorph := (Z5DictionaryEntrySignalEditorMorph new forSignal: (signal at:key) at:key atDepth: depth + 1) 				position: (self position) + margin;				yourself.			lastItem ifNotNil: [				itemMorph position: (lastItem topRight + ((margin * 1)@0)).				self extent: self extent + ((margin * 1)@0)].			self height: ((itemMorph height) + (margin * 2) max: self height).			self extent: (self extent + ((itemMorph width + margin)@0)).			self addMorph: itemMorph.			lastItem := itemMorph]."! !Z5SignalEditorMorph subclass: #Z5EmptySignalEditorMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5EmptySignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:39'!initialize	super initialize.	self color: (Color white).	self extent: textSize@(textSize + margin).	self addMorph: (Z5SignalEditorInputMorph new		listen:  [:text|self updateSignal: text];		position: self position + (0@(margin/2));		contents: '';		yourself).! !Morph subclass: #Z5SignalEditorRootMorph	instanceVariableNames: 'editor isExpanded'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5SignalEditorRootMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:24'!compact	isExpanded := false.	editor compact.	self extent: (editor extent + (10@0)).	self changed.! !!Z5SignalEditorRootMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 14:57'!drawOn: canvas	| triangle |	super drawOn: canvas.		triangle := isExpanded		ifTrue: [{5@2. 8@6. 2@6}]		ifFalse: [{5@6. 8@2. 2@2}].			canvas drawPolygon: (triangle collect: [:x|x + self position])		color: (Color white)		borderWidth: 0		borderColor: nil.! !!Z5SignalEditorRootMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:23'!expand	isExpanded := true.	editor expand.	self extent: (editor extent + (10@0)).	self changed.! !!Z5SignalEditorRootMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:25'!forSignal: signal	editor := Z5SignalEditorMorph forSignal: signal atDepth: 0.	editor position: (self position + (10@0)).	isExpanded := false.	self color: (Color black mixed: 0.8 with: (Color white)).	self extent: (editor extent + (10@0)).	self removeAllMorphs; addMorph: editor.	self compact.! !!Z5SignalEditorRootMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:26'!handlesMouseDown: event	^ (self position extent: (10@10)) containsPoint: (event cursorPoint)! !!Z5SignalEditorRootMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:38'!mouseDown: event	self toggle! !!Z5SignalEditorRootMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 18:38'!toggle	isExpanded 		ifTrue: [self compact]		ifFalse: [self expand].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Z5SignalEditorRootMorph class	instanceVariableNames: ''!!Z5SignalEditorRootMorph class methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 14:37'!forSignal: signal	^ self new forSignal: signal; yourself.! !Z5SignalEditorMorph subclass: #Z5StringSignalEditorMorph	instanceVariableNames: 'string'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5StringSignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 15:07'!compact	self extent: (string extent) + (margin * 1).! !!Z5StringSignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 15:07'!expand	self extent: (string extent) + (margin * 1).! !!Z5StringSignalEditorMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/27/2017 15:24'!forSignal: aSignal atDepth: depth	super forSignal: aSignal atDepth: depth.		string := Z5SignalEditorInputMorph new		listen: [self updateLayout];		contents: signal;		fontName: #default size: textSize;		color: textColor;		position: (self position) + (margin / 2);		yourself.			self removeAllMorphs.	self addMorph: string.! !Morph subclass: #Z5TurtleScopeMorph	instanceVariableNames: 'turtle'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5TurtleScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 21:14'!drawOn: canvas	| p1 clipped |	clipped := canvas copyClipRect: self bounds..			super drawOn: canvas.	p1 := turtle path first.	turtle path do: [ :p | 		clipped line: (self position + p1) to: (self position + p) color: Color white.		p1 := p ].	clipped drawPolygon: self triangle		color: (Color green mixed: 0.5 with: Color white)		borderWidth: 0		borderColor: nil.! !!Z5TurtleScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/15/2017 22:58'!forZell: aZell	turtle := aZell.	turtle observedBy: self.! !!Z5TurtleScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/15/2017 22:53'!initialize	super initialize.	self color: Color black.	self extent: 200@200.! !!Z5TurtleScopeMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/22/2017 10:13'!triangle	^ { 9 @ 0.	-5 @ 5. -5 @ -5 } collect: [ :x | 			self position + turtle position 			+ (x rotateBy: turtle heading degreesToRadians about: 0@0) ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Z5TurtleScopeMorph class	instanceVariableNames: ''!!Z5TurtleScopeMorph class methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 20:44'!for: zell	^ (self new)		forZell: zell;		yourself.! !Morph subclass: #Z5ZellMorph	instanceVariableNames: 'zell receiving transmitting events'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5ZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:49'!accepted: signal	[ 		receiving := true.		self changed.		(Delay forMilliseconds: 100) wait. 		receiving := false. 		self changed. 	] fork.! !!Z5ZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 19:51'!delete	events trigger: #deleted with: self.	super delete.! !!Z5ZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:26'!drawOn: canvas	canvas 		frameOval: (self bounds)		color: (transmitting ifTrue: [Color white] ifFalse: [self color]).			receiving ifTrue: [ 		canvas 			fillOval: (self bounds) 			color: (self color mixed: 0.3 with: Color black) ].! !!Z5ZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:49'!initialize	super initialize.	receiving := false.	transmitting := false.	events := Z5EventHandler new.	self color: (((Color wheel: 8) atRandom) mixed: 0.5 with: (Color white)).	self extent: 30@30.! !!Z5ZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 16:07'!onDeleted: block	events on: #deleted do: block.! !!Z5ZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:38'!transmit: signal	[		transmitting := true.		self changed.		(Delay forMilliseconds: 100) wait. 		transmitting := false.		self changed.	] fork.	! !!Z5ZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 15:42'!zell	^ zell.! !!Z5ZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 21:50'!zell: aZell	zell := aZell		onEmit: [ :s | self transmit: s ];		onAccept: [ :s | self accepted: s ];		yourself! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Z5ZellMorph class	instanceVariableNames: ''!!Z5ZellMorph class methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 19:21'!for: zell	^ self new zell: zell; yourself.! !Z5ZellMorph subclass: #Z5ButtonZellMorph	instanceVariableNames: 'text string'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5ButtonZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/19/2017 08:44'!changed	super changed.	string ifNotNil: [:s| s position: self center - (string extent / 2)].! !!Z5ButtonZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:51'!initialize	super initialize.	self color: (Color red mixed: 0.5 with: Color white).		string := StringMorph new		color: self color;		yourself.	self addMorph: string.! !!Z5ButtonZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/25/2017 14:02'!mouseDown: event	zell receive: #touch.! !!Z5ButtonZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 10:22'!signal: signal	self zell: (Z5DynamicZell doing: [ :s :z | 		(s = #touch) ifTrue: [ z emit: (Z5StemZell thatIsA: '"',signal,'"') ]]).	string contents: signal.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Z5ButtonZellMorph class	instanceVariableNames: ''!!Z5ButtonZellMorph class methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 19:55'!emitting: signal	^ self new 		signal: signal;		yourself.! !Z5ZellMorph subclass: #Z5ClockZellMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5ClockZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 19:58'!drawOn: canvas	| points |	super drawOn: canvas.	canvas frameOval: (self center - (7@7) extent: 14@14) color: (self color).		points := ({-3@ -3. 0@0. -3@3} collect: [:p|p+self center+(2@ -7)]).	canvas line: (points at: 1) to: (points at: 2) color: (self color).	canvas line: (points at: 2) to: (points at: 3) color: (self color).! !!Z5ClockZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/18/2017 20:26'!initialize	super initialize.	self zell: (Z5ClockZell new).! !!Z5ClockZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 20:36'!mouseDown: event	| scope |	scope := (Z5ClockScopeMorph new forZell: zell) openInWindow.	scope position: (self owner owner bounds bottomLeft + (0@20)).! !Z5ZellMorph subclass: #Z5EmitterZellMorph	instanceVariableNames: 'isOpen'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5EmitterZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 19:52'!drawOn: canvas	| points |	super drawOn: canvas.	canvas fillOval: (self center + (-6@ -1) extent: 2@2) color: (self color).		points := ({-8@ -5. -3@0. -8@5} collect: [:p|p+self center+(10@0)]).	canvas line: (points at: 1) to: (points at: 2) color: (self color).	canvas line: (points at: 2) to: (points at: 3) color: (self color).		points := ({-11@ -3. -8@0. -11@3} collect: [:p|p+self center+(10@0)]).	canvas line: (points at: 1) to: (points at: 2) color: (self color).	canvas line: (points at: 2) to: (points at: 3) color: (self color).! !!Z5EmitterZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/25/2017 13:19'!initialize	super initialize.	self zell: Z5Zell new.! !!Z5EmitterZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 20:32'!mouseDown: event	(Z5EmitterScopeMorph new		forZell: zell; 		yourself) 			openInWindow 			position: (self owner owner bounds topRight + (20@0))! !Z5ZellMorph subclass: #Z5ListenerZellMorph	instanceVariableNames: 'scope'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5ListenerZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 19:50'!drawOn: canvas	| points |	super drawOn: canvas.	canvas fillOval: (self center + (4@ -1) extent: 2@2) color: (self color).		points := ({-8@ -5. -3@0. -8@5} collect: [:p|p+self center+(3@0)]).	canvas line: (points at: 1) to: (points at: 2) color: (self color).	canvas line: (points at: 2) to: (points at: 3) color: (self color).		points := ({-11@ -3. -8@0. -11@3} collect: [:p|p+self center+(3@0)]).	canvas line: (points at: 1) to: (points at: 2) color: (self color).	canvas line: (points at: 2) to: (points at: 3) color: (self color).! !!Z5ListenerZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 09:47'!initialize	super initialize.	self color: (Color blue mixed: 0.5 with: Color white).	self zell: (Z5DynamicZell doing: [:s :z | 		z accept: s. 		self receive: s])! !!Z5ListenerZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 20:31'!mouseDown: event	scope := Z5ListenerScopeMorph new.	scope openInWindow		position: (self owner owner bounds topLeft - (scope width + 30 @0))! !!Z5ListenerZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 12:52'!receive: signal	scope ifNotNil: [scope add: signal]! !Z5ZellMorph subclass: #Z5StemZellMorph	instanceVariableNames: 'name isA hasAs'	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5StemZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/23/2017 22:49'!drawOn: canvas	| leftClipped rightClipped half full |	full := self height.	half := full / 2.		leftClipped := canvas copyClipRect: (self position extent: half @ self height).	leftClipped frameOval: (self position extent: full @ self height) color: self color.	rightClipped := canvas copyClipRect: ((self topRight - (half@0)) extent: half @ self height).	rightClipped frameOval: ((self topRight - (full@0)) extent: full @ self height) color: self color.		canvas line: (self position + (half@0)) to: (self topRight - (half@0)) color: self color.	canvas line: (self bottomLeft + (half@ -1)) to: (self bottomRight - (half@ 1)) color: self color.! !!Z5StemZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/23/2017 22:52'!initialize	super initialize.	self extent: 40@40.! !!Z5StemZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/24/2017 12:29'!zell: aStemZell	| lastHasAPosition |	super zell: aStemZell.		name := StringMorph new		color: self color;		contents: (aStemZell name ifNil: ['']);		yourself.	self addMorph: name.		isA := StringMorph new		color: self color;		contents: (aStemZell isA ifNil: ['']);		yourself.	self addMorph: isA.	self zell onBeingA: [:a|isA contents: a].		self width: (name width max: (isA width)) + (self height - 16).		name position: (self position + ((self width /2)@(self height - name height - 2))  - ((name width / 2) @0)).	isA position: (self position + ((self width /2)@2)  - ((isA width / 2) @0)).		hasAs := aStemZell hasAs collect: [:a | Z5StemZellMorph for: a].	self addAllMorphs: hasAs.		lastHasAPosition := self topRight + (0@5).	hasAs do: [:a|		self width: (self width + a width + 5).		self height: (self height max: (a height + 10)).		a position: lastHasAPosition.		lastHasAPosition := lastHasAPosition + (a width@0) + (5@0)].! !Z5ZellMorph subclass: #Z5TurtleZellMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'zells-five-ui'!!Z5TurtleZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:52'!drawOn: canvas	super drawOn: canvas.	canvas drawPolygon: ({0@ -7. 5@7. -5@7} collect: [:x|self center + x])		color: (self color)		borderWidth: 0		borderColor: nil.! !!Z5TurtleZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 5/25/2017 23:51'!initialize	super initialize.	self zell: Z5TurtleZell new.	self color: (Color green mixed: 0.5 with: Color white).! !!Z5TurtleZellMorph methodsFor: 'as yet unclassified' stamp: 'NM 6/26/2017 20:35'!mouseDown: event	| scope |	scope := (Z5TurtleScopeMorph new forZell: zell) openInWindow.	scope position: (self owner owner bounds bottomRight - (-20@ scope height))! !